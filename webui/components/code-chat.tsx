"use client";
import { Button } from "@/components/ui/button";
import { OllamaChat } from "@/components/system-call";
import { useState } from "react";
import Link from "next/link";
import SyntaxHighlighter from "react-syntax-highlighter";
import { gradientDark } from "react-syntax-highlighter/dist/esm/styles/hljs";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
export function CodeChat({ children, output, scenario }) {
  const [response, setRespone] = useState("");

  async function ExplainCode() {
    setRespone("please wait...");
    //const newResponse = await OllamaChat(
    //  "can you describe the following code in a short paragraph:" + output
    //);
    const newResponse =
      "**This is a saved text out.** This code is a simulation using the Network Simulator (ns-3) framework, which is used to simulate and model computer networks. The code defines a simple network topology with two nodes (n0 and n1) connected by a point-to-point link. Each node runs an IPv4 stack and has an IP address in the range 10.1.1.0/24. The simulation starts with two applications: one is a UDP echo server running on node n1, and the other is a UDP echo client running on node n0. The client sends packets to the server at regular intervals (every second) for 8 seconds, and the server responds with the same packets back to the client. The code uses various ns-3 modules to set up the simulation, including the `applications-module`, `core-module`, `internet-module`, `network-module`, and `point-to-point-module`. The `NS_LOG_COMPONENT_DEFINE` macro defines a log component for logging events during the simulation.";
    setRespone(newResponse);
  }
  return (
    <>
      <Card className="mx-auto mx-10">
        <CardHeader>
          <CardTitle className="text-2xl">
            <Button className="w-full" onClick={ExplainCode}>
              Explain code
            </Button>
          </CardTitle>
          <CardDescription>
            The code summary is generated by{" "}
            <Link
              href="https://ai.meta.com/blog/code-llama-large-language-model-coding/"
              className="underline"
            >
              Code Llama
            </Link>
          </CardDescription>
        </CardHeader>
        <CardContent>
          {response && (
            <SyntaxHighlighter
              language="markdown"
              style={gradientDark}
              wrapLongLines
              className="whitespace-nowrap"
            >
              {response}
            </SyntaxHighlighter>
          )}
        </CardContent>
      </Card>
    </>
  );
}
